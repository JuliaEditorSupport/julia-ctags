! A test file for ctags support. Manually written, do not overwrite.
! For the kinds (fourth column), see the ctags file.
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/1a94658c/
CtagsTest	test/testfile.jl	/^module CtagsTest$/;"	m
ImmutablePoint	test/testfile.jl	/^struct ImmutablePoint{T}$/;"	s
MutablePoint	test/testfile.jl	/^mutable struct MutablePoint{T}$/;"	s
Names	test/testfile.jl	/^Base.@kwdef struct Names$/;"	s
VariableNames	test/testfile.jl	/^Base.@kwdef mutable struct VariableNames$/;"	s
addcoment	test/testfile.jl	/^addcoment(string::AbstractString, comment, spaces=1) = begin  # Maybe write without `begin`?$/;"	f
addone!	test/testfile.jl	/^function addone!(x::T) where {T <: Number}$/;"	f
addtwo!	test/testfile.jl	/^addtwo!(x::T) where {T <: Number} = (x += one(T) + one(T))$/;"	f
greet	test/testfile.jl	/^@generated function greet(x)$/;"	f
greeting	test/testfile.jl	/^const greeting = "Hello"$/;"	v
multiply	test/testfile.jl	/^multiply(x, y) = x * y$/;"	f
multiply	test/testfile.jl	/^multiply(x, y...) = begin$/;"	f
myconstsquarepower	test/testfile.jl	/^const myconstsquarepower = returnsquarepower()$/;"	v
mysquarepower	test/testfile.jl	/^mysquarepower = returnsquarepower()$/;"	v
returnsquarepower	test/testfile.jl	/^returnsquarepower = () -> 2$/;"	f
square	test/testfile.jl	/^function square(x)$/;"	f
squarepower	test/testfile.jl	/^squarepower = returnsquarepower$/;"	v
